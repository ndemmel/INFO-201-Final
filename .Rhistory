mpa
map
setwd("~/Desktop/INFO/a8-shiny-ndemmel")
geo_map(midwest_data, map.var)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
library(dplyr)
library(ggplot2)
library(stringr)
midwest_data <- data.frame(midwest)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
)
library(ggplot2)
library(plotly)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
return(map)
}
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, mapvar], text = ~state, locations = ~code,
color = midwest_data[, mapvar], colors = "Blues"
) %>%
geo_map <- function(midwest_data, mapvar) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, mapvar], text = ~state, locations = ~code,
color = midwest_data[, mapvar], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
return(map)
}
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
return(map)
}
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
)
scatterplot_map <- function(midwest_data, search = "",
xvar = "plotvar", yvar = "percbelowpoverty") {
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar]) %>%
return()
}
sctterplot_map(midwest_data, "ADAMS")
scatterplot_map <- function(midwest_data, search = "",
xvar = "plotvar", yvar = "percbelowpoverty") {
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar]) %>%
return()
}
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar])
library(dplyr)
library(ggplot2)
library(plotly)
library(stringr)
midwest_data <- data.frame(midwest)
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
return(map)
}
scatterplot_map <- function(midwest_data, search = "",
xvar = "plotvar", yvar = "percbelowpoverty") {
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar]) %>%
return()
}
scatterplot_map(midwest_data, "ADAMS")
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar])
output <- midwest_data %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar])
output <- midwest_data
output <- midwest_data %>%
filter(grepl(search, county))
?grepl
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/INFO-201-Final')
library(dplyr)
library(ggplot2)
library(plotly)
library(shiny)
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
interactive_scatterplot <- function(hate_crimes_minus_DC) {
plot_ly(data = hate_crimes_minus_DC, x = income_corr,
y = avg_hatecrimes_per_100k_fbi)
}
output$interactive <- renderPlotly({
interactive_scatterplot <- function(hate_crimes_minus_DC) {
plot_ly(data = hate_crimes_minus_DC, x = income_corr,
y = avg_hatecrimes_per_100k_fbi)
}
})
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
ggplot(hate_crimes_minus_DC, aes(x = income_corr,
y = avg_hatecrimes_per_100k_fbi,
color = edu_corr)) +
geom_point()
interactive_scatterplot <- function(hate_crimes_minus_DC) {
ggplot(hate_crimes_minus_DC, aes(x = income_corr,
y = avg_hatecrimes_per_100k_fbi,
color = edu_corr)) +
geom_point()
}
plot_ly(hate_crimes_minus_DC, x = income_corr,
y = avg_hatecrimes_per_100k_fbi)
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$income_corr,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi)
interactive_scatterplot <- function(hate_crimes_minus_DC) {
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$income_corr,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi)
}
View(interactive_scatterplot)
?
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$gini_index,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi) %>%
layout(title = "Education, Diversity, and Income vs Hate Crime Rate",
yaxis = list("Average Hate Crimes per 100k People"),
xaxis = list("Percent of People With a High School Degree"))
library(dplyr)
interactive_scatterplot <- function(hate_crimes_minus_DC) {
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$gini_index,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi) %>%
layout(title = "Education, Diversity, and Income vs Hate Crime Rate",
yaxis = list("Average Hate Crimes per 100k People"),
xaxis = list("Percent of People With a High School Degree"))
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$gini_index,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi) %>%
layout(title = "Education, Diversity, and Income vs Hate Crime Rate",
yaxis = list("Average Hate Crimes per 100k People"),
xaxis = list("Percent of People With a High School Degree"))
?dplyr
shiny::runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
?background-color
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
lintr::lint("server.R")
setwd("~/Desktop/INFO/INFO-201-Final")
lintr::lint(server.R)
lintr::lint("server.R")
lintr::lint("server.R")
lintr::lint("analysis.R")
lintr::lint("ui.R")
lintr::lint("ui.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(hate_crimes)
runApp()
runApp()
runApp()
runApp()
?data
View(midwest)
runApp()
runApp()
runApp()
runApp()
runApp()
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
View(p)
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
geo = g
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
View(p)
plot(g)
df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
# light grey boundaries
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
runApp()
runApp()
?if
runApp()
runApp()
runApp()
runApp()
?"if"
runApp()
tabPanel("Scatter Plot",
sidebarLayout(
sidebarPanel(
"Pick Which Regression Lines You Want to See",
checkboxGroupInput("xvar",
label = "Choose from 3 Characteristics",
choices = list("Education" = "edu_corr",
"Income Inequality" = "income_corr",
"Racial Diversity" = "div_corr"))
),
mainPanel(plotlyOutput("scatter"))
checkboxGroupInput("xvar",
label = "Choose from 3 Characteristics",
choices = list("Education" = "edu_corr",
"Income Inequality" = "income_corr",
"Racial Diversity" = "div_corr"))
sidebarPanel(
"Pick Which Regression Lines You Want to See",
checkboxGroupInput("xvar",
label = "Choose from 3 Characteristics",
choices = list("Education" = "edu_corr",
"Income Inequality" = "income_corr",
"Racial Diversity" = "div_corr"))
runApp()
runApp()
runApp()
View(hate_crimes_minus_DC)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
