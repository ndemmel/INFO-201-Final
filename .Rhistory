geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color")
return(map)
layout(
geo = projection
)
}
geo_map(midwest_data, "percollege")
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
layout(
geo = projection
)
geo = projection
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color")
return(map)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
)
geo_map <- function(midwest_data, map.var) {
library(dplyr)
library(ggplot2)
library(stringr)
midwest_data <- data.frame(midwest)
#scatterplot_map <- function(midwest_data, search = "",
#                          xvar = "percbelowpoverty", yvar = "")
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color")
return(map)
layout(
geo = projection
)
}
shinyServer(function(input, output) {
output$map <- renderPlotly({
return(geo_map(midwest_data, input$mapvar))
})
shinyServer(function(input, output) { #i want to use the reactive function for this, I think? If I'm like...idek
output$plot <- renderPlotly({
return(plot(midwest_data, input$plotvar))
})
})
})
runApp('Desktop/INFO/a8-shiny-ndemmel')
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
library(dplyr)
library(ggplot2)
library(stringr)
midwest_data <- data.frame(midwest)
#scatterplot_map <- function(midwest_data, search = "",
#                          xvar = "percbelowpoverty", yvar = "")
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color")
return(map)
layout(
geo = projection
)
}
geo_map <- function(midwest_data, map.var) {
geo_map
map
geo_map(midwest_data, percbelowpoverty)
shinyUI(navbarPage(theme = shinytheme("united"),
"Midwest",
tabPanel(
"Map",
titlePanel("Racial Makeup of the Midwest"),
sidebarLayout(
sidebarPanel(
tags$h2("You can interact with this map!"),
selectInput(
"mapvar",
label = "Percent of the Population by Race",
choices=list("White People" = "percwhite",
"Black People" = "percblack",
"Asian People" = "percasian"
)
),
tags$br(),
HTML("<strong>Choose a color!<strong>"),
tags$div(class = "sidebar")
),
mainPanel(
plotlyOutput("map"),
tags$link(rel = "stylesheet", type = "text/css",
href = "style.css"),
tags$div(class = "summary", checked = NA,
tags$p("The map shows demographic information
for counties in the midwestern state
of the U.S. ")
),
tags$a(href = "http://midwestgothic.com/", "Read more
about life in the midwest here")
)
)
), #LMFAO I JUST MADE TWO PAGES THAT HAVE THE EXACT SAME THING
tabPanel(
"Scatterplot",
titlePanel("Poverty in the Midwest"),
sidebarLayout(
sidebarPanel(
tags$h2("See which age groups are affected the most
by poverty"),
selectInput(
"plotvar",
label = "Percent of the Population by Age",
choices=list("Children" = "percchildbelowpovert",
"Adults" = "percadultpoverty",
"Elderly" = "percelderlypoverty"
)
),
tags$br(),
HTML("<strong>Choose a color!<strong>"),
tags$div(class = "sidebar")
),
mainPanel(
plotlyOutput("plot"),
tags$link(rel = "stylesheet", type = "text/css",
href = "style.css"),
tags$div(class = "summary", checked = NA,
tags$p("This plot shows the difference
between the percent of people who live
in poverty from one age group
and the county's total percent of
citizens who live in poverty.")
)
)
)
)
))
runApp('Desktop/INFO/a8-shiny-ndemmel')
mpa
map
setwd("~/Desktop/INFO/a8-shiny-ndemmel")
geo_map(midwest_data, map.var)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
library(dplyr)
library(ggplot2)
library(stringr)
midwest_data <- data.frame(midwest)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
)
library(ggplot2)
library(plotly)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
return(map)
}
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, mapvar], text = ~state, locations = ~code,
color = midwest_data[, mapvar], colors = "Blues"
) %>%
geo_map <- function(midwest_data, mapvar) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, mapvar], text = ~state, locations = ~code,
color = midwest_data[, mapvar], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
return(map)
}
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
return(map)
}
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
)
scatterplot_map <- function(midwest_data, search = "",
xvar = "plotvar", yvar = "percbelowpoverty") {
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar]) %>%
return()
}
sctterplot_map(midwest_data, "ADAMS")
scatterplot_map <- function(midwest_data, search = "",
xvar = "plotvar", yvar = "percbelowpoverty") {
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar]) %>%
return()
}
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar])
library(dplyr)
library(ggplot2)
library(plotly)
library(stringr)
midwest_data <- data.frame(midwest)
geo_map <- function(midwest_data, map.var) {
border <- list(color = toRGB("black"), width = 3)
projection <- list(
scope = "usa",
projection = list(type = "albers usa"),
showlakes = FALSE
)
map <- plot_geo(midwest_data, locationmode = "USA-states") %>%
add_trace(
z = midwest_data[, map.var], text = ~state, locations = ~code,
color = midwest_data[, map.var], colors = "Blues"
) %>%
colorbar(title = "Color") %>%
layout(
geo = projection
)
return(map)
}
scatterplot_map <- function(midwest_data, search = "",
xvar = "plotvar", yvar = "percbelowpoverty") {
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar]) %>%
return()
}
scatterplot_map(midwest_data, "ADAMS")
output <- output %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar])
output <- midwest_data %>%
filter(grepl(search, county))
plot_ly(x = output[, xvar],
y = data[, yvar])
output <- midwest_data
output <- midwest_data %>%
filter(grepl(search, county))
?grepl
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/a8-shiny-ndemmel')
shiny::runApp('Desktop/INFO/INFO-201-Final')
library(dplyr)
library(ggplot2)
library(plotly)
library(shiny)
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
interactive_scatterplot <- function(hate_crimes_minus_DC) {
plot_ly(data = hate_crimes_minus_DC, x = income_corr,
y = avg_hatecrimes_per_100k_fbi)
}
output$interactive <- renderPlotly({
interactive_scatterplot <- function(hate_crimes_minus_DC) {
plot_ly(data = hate_crimes_minus_DC, x = income_corr,
y = avg_hatecrimes_per_100k_fbi)
}
})
runApp('Desktop/INFO/INFO-201-Final')
runApp('Desktop/INFO/INFO-201-Final')
ggplot(hate_crimes_minus_DC, aes(x = income_corr,
y = avg_hatecrimes_per_100k_fbi,
color = edu_corr)) +
geom_point()
interactive_scatterplot <- function(hate_crimes_minus_DC) {
ggplot(hate_crimes_minus_DC, aes(x = income_corr,
y = avg_hatecrimes_per_100k_fbi,
color = edu_corr)) +
geom_point()
}
plot_ly(hate_crimes_minus_DC, x = income_corr,
y = avg_hatecrimes_per_100k_fbi)
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$income_corr,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi)
interactive_scatterplot <- function(hate_crimes_minus_DC) {
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$income_corr,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi)
}
View(interactive_scatterplot)
?
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$gini_index,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi) %>%
layout(title = "Education, Diversity, and Income vs Hate Crime Rate",
yaxis = list("Average Hate Crimes per 100k People"),
xaxis = list("Percent of People With a High School Degree"))
library(dplyr)
interactive_scatterplot <- function(hate_crimes_minus_DC) {
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$gini_index,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi) %>%
layout(title = "Education, Diversity, and Income vs Hate Crime Rate",
yaxis = list("Average Hate Crimes per 100k People"),
xaxis = list("Percent of People With a High School Degree"))
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$gini_index,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi) %>%
layout(title = "Education, Diversity, and Income vs Hate Crime Rate",
yaxis = list("Average Hate Crimes per 100k People"),
xaxis = list("Percent of People With a High School Degree"))
?dplyr
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$share_population_with_high_school_degree,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi)
library(ggplot2)
library(dplyr)
library(plotly)
hate_crimes <- read.csv("hate_crimes.csv", stringsAsFactors = FALSE)
hate_crimes_minus_DC <- hate_crimes[-9, ]
setwd("~/Desktop/INFO/INFO-201-Final")
library(dplyr)
# hate crimes
hate_crimes <- read.csv("hate_crimes.csv", stringsAsFactors = FALSE)
hate_crimes_minus_DC <- hate_crimes[-9, ]
# affect of income inequality on rate of hate crimes
hate_crimes_minus_DC <- mutate(hate_crimes_minus_DC, income_corr = gini_index
/ avg_hatecrimes_per_100k_fbi)
# affect of education on rate of hate crimes
hate_crimes_minus_DC <- mutate(hate_crimes_minus_DC,
edu_corr = share_population_with_high_school_degree /
avg_hatecrimes_per_100k_fbi)
# affect of racial diversity on rate of hate crimes
hate_crimes_minus_DC <- mutate(hate_crimes_minus_DC, div_corr = share_non_white
/ avg_hatecrimes_per_100k_fbi)
# 2016 Presidential Election
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$share_population_with_high_school_degree,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi)
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$income_corr,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi) %>%
layout(title = "Education, Diversity, and Income vs Hate Crime Rate",
yaxis = list("Average Hate Crimes per 100k People"),
xaxis = list("Percent of People With a High School Degree"))
interactive_scatterplot <- function(hate_crimes_minus_DC) {
plot_ly(hate_crimes_minus_DC, x = hate_crimes_minus_DC$income_corr,
y = hate_crimes_minus_DC$avg_hatecrimes_per_100k_fbi) %>%
layout(title = "Education, Diversity, and Income vs Hate Crime Rate",
yaxis = list("Average Hate Crimes per 100k People"),
xaxis = list("Percent of People With a High School Degree"))
}
View(interactive_scatterplot)
shiny::runApp()
runApp()
runApp()
runApp()
View(hate_crimes_minus_DC)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/INFO/a8-shiny-ndemmel')
runApp()
